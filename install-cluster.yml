
- name: update all packages
  become: yes
  hosts: kafka_hosts zookeeper_hosts
  tasks:
    - pacman:
        update_cache: yes
    - pacman:
        upgrade: yes
      register: reboot_required

- name: ensure lots of open files on all pi's
  become: yes
  hosts: all
  gather_facts: no
  tasks:
    - blockinfile:
        path: /etc/security/limits.conf
        block: |
          * hard nofile 100000
          * soft nofile 100000
      register: reboot_required

- name: disable bluetooth/wifi on raspberry pi
  become: yes
  hosts: pi1 pi2 pi3 pi4 pi5
  gather_facts: no
  tasks:
    - blockinfile:
        path: /etc/modprobe.d/brcm-blacklist.conf
        create: yes
        backup: yes
        mode: '644'
        owner: 'root'
        group: 'root'
        block: |
          blacklist brcmfmac
          blacklist brcmutil
      # NB: wont take effect until next reboot (that's ok for this non-essential activity)

- name: install required packages for kafka/zookeeper hosts
  hosts: kafka_hosts zookeeper_hosts
  become: yes
  tasks:
    - pacman:
        name:
          - jdk-openjdk
          - gnu-netcat
          - wget
          - ca-certificates  
          - zip 
          - net-tools
          - vim 
          - nano 
          - tar
          - rsync
          - cronie
        state: present

- name: disable swap on kafka/zookeeper hosts and ensure sufficient mmap
  hosts: kafka_hosts zookeeper_hosts
  become: yes
  tasks:
    - sysctl:
        name: vm.swappiness
        value: '1'
        state: present
    - sysctl:
        name: vm.max_map_count
        value: '262144'
        state: present

- name: ensure all kafka/zookeeper cluster nodes have same host entries
  hosts: all
  become: yes
  gather_facts: no
  tasks: 
     - blockinfile:
         path: /etc/hosts
         block: |
           192.168.1.80 pi1
           192.168.1.81 pi2
           192.168.1.82 pi3
           192.168.1.83 pi4
           192.168.1.84 pi5
           192.168.1.82 kafka1
           192.168.1.82 zookeeper1
           192.168.1.83 kafka2
           192.168.1.83 zookeeper2
           192.168.1.84 kafka3
           192.168.1.84 zookeeper3

# if a reboot is required, do that now and wait for it to come back for the rest of the play
- name: reboot kafka/zookeeper nodes iff required
  hosts: kafka_hosts zookeeper_hosts
  become: yes
  tasks:
    - reboot:
      when: reboot_required.changed

- name: ensure kafka home directory exists with correct permissions
  hosts: kafka_hosts
  become: yes
  tasks:
    - file: path=/home/kafka owner=kafka group=kafka mode='0750' state=directory
    - file: path=/data owner=root group=kafka mode='0750' state=directory
    - file: path=/data/kafka owner=kafka group=kafka mode='0750' state=directory
    - file: path=/data/kafka owner=kafka group=kafka recurse=yes # ensure correct ownership of existing data to correspond with service definition
          
- name: ensure kafka/zookeeper stable software is installed under /home/kafka
  hosts: kafka_hosts zookeeper_hosts
  become: yes
  tasks:
    - unarchive:
        src: https://archive.apache.org/dist/kafka/2.4.0/kafka_2.13-2.4.0.tgz
        dest: /home/kafka
        remote_src: yes
        owner: kafka
        group: kafka
        creates: /home/kafka/kafka
      register: unpacked
    - command: mv /home/kafka/kafka_2.13-2.4.0 /home/kafka/kafka
      when: unpacked.changed
    - file:
         owner: kafka
         group: kafka
         recurse: yes
         path: /home/kafka/kafka
      when: unpacked.changed

- name: ensure zookeeper properties are installed
  hosts: zookeeper_hosts
  become: yes
  vars:
    - id_list: { '192.168.1.82': '1', '192.168.1.83': '2', '192.168.1.84': '3' }
  tasks:
    - file:
        path: /data/zookeeper
        owner: root
        group: root
        mode: '0750'
        state: directory
    - stat: path=/data/zookeeper/myid
      register: st
    - template:
        src: templates/zookeeper.node.id.j2
        dest: /data/zookeeper/myid
        owner: root
        group: root
        mode: '0644'
      when: not st.stat.exists
    - template: 
        src: templates/zookeeper.properties.j2
        dest: /home/kafka/kafka/config/zookeeper.properties
        owner: kafka
        group: kafka
        mode: '0644'
      register: zookeeper_properties

- name: setup zookeeper systemd service
  hosts: zookeeper_hosts
  become: yes
  vars:
    KAFKA_HOME: "/home/kafka/kafka"
  tasks:
    - template:
        src: templates/zookeeper.service.j2
        dest: /etc/systemd/system/zookeeper.service
        owner: root
        group: root
        mode: '0644'
      register: zookeeper_service
    - systemd:
         daemon_reload: yes
      when: zookeeper_service.changed or zookeeper_properties.changed
    - systemd:
         enabled: yes
         state: restarted
         name: zookeeper
      ignore_errors: yes # ignore service already enabled errors

- name: ensure kafka properties are installed
  hosts: kafka_hosts
  become: yes
  vars:
    KAFKA_HOME: "/home/kafka/kafka"
  tasks:
    - file:
        path: /data/kafka
        owner: kafka
        group: kafka
        mode: '0750'
        state: directory 
    - template:
        src: templates/kafka.properties.j2
        dest: "{{ KAFKA_HOME }}/config/server.properties"
        owner: kafka
        group: kafka
        mode: '0644'
      register: kafka_properties

- name: setup kafka systemd service
  hosts: kafka_hosts
  become: yes
  vars: 
    KAFKA_HOME: "/home/kafka/kafka"
  tasks:
    - template:
        src: templates/kafka.service.j2
        dest: /etc/systemd/system/kafka.service
        owner: kafka
        group: kafka
        mode: '0644'
      register: kafka_service
    - systemd:
        daemon_reload: yes
      when: kafka_service.changed or kafka_properties.changed
    - systemd:
         enabled: yes
         state: restarted
         name: kafka
      ignore_errors: yes # ignore service already enabled error

- name: ensure mongo user and group exists on mongo host
  hosts: mongodb_host
  become: yes
  tasks:
    - command: /usr/bin/useradd --user-group --shell /sbin/nologin --comment "Run mongodb only" mongo
      ignore_errors: yes

- name: ensure pymongo is installed on MongoDB hosts and setup RBAC
  hosts: mongodb_host
  become: yes
  tasks:
    - pip: name=pymongo executable=pip3
    - mongodb_user: # create superuser
        user: root
        password: "{{ lookup('file', 'group_vars/passwd.mongo.root') }}"
        update_password: on_create  # dont update the passwd if the user already exists
        roles: root
        state: present
        database: admin
        login_user: root
        login_host: 'pi1'
        login_password: "{{ lookup('file', 'group_vars/passwd.mongo.root') }}"
        login_database: admin
    - mongodb_user: # but also read only (ro) and read-write roles for au_js database
        user: ro
        password: "{{ lookup('file', 'group_vars/passwd.mongo.ro') }}"
        roles: readAnyDatabase
        state: present
        database: admin
        login_user: root
        login_host: 'pi1'
        login_password: "{{ lookup('file', 'group_vars/passwd.mongo.root') }}"
        login_database: admin
    - mongodb_user: # and now for rw role (NB: we always set the password)
        user: rw
        password: "{{ lookup('file', 'group_vars/passwd.mongo.rw') }}"
        roles: readWriteAnyDatabase
        state: present
        database: admin
        login_user: root
        login_host: 'pi1'
        login_password: "{{ lookup('file', 'group_vars/passwd.mongo.root') }}"
        login_database: admin
        
- name: setup mongo on database host for thug to store into
  hosts: mongodb_host
  become: yes
  vars:
    MONGO_HOME: "/data/mongodb"
    MONGO_SW: "{{ MONGO_HOME }}/mongodb-linux-aarch64-ubuntu1804-4.2.2"
  tasks:
    - file:
         path: "{{ item }}"
         owner: mongo
         group: mongo
         mode: '0750'
         state: directory
      with_items:
         - "{{ MONGO_HOME }}"
         - "{{ MONGO_HOME }}/data"
         - "{{ MONGO_HOME }}/logs"
# install the ubuntu arm64 community edition, since the manjaro repos have a broken mongod
    - stat: path="{{ MONGO_SW }}"
      register: mongo_software
    - unarchive:
        src: software/mongodb-linux-aarch64-ubuntu1804-4.2.2.tgz
        dest: "{{ MONGO_HOME }}"
        owner: mongo
        group: mongo
      register: installation   
      when: not mongo_software.stat.exists
    - file:
        path: "{{ MONGO_HOME }}/bin"
        src: "{{ MONGO_HOME }}/mongodb-linux-aarch64-ubuntu1804-4.2.2/bin"
        state: link
    - template:
        src: templates/mongodb.service.j2
        dest: /etc/systemd/system/mongodb.service
        owner: mongo
        group: mongo
        mode: '0644'
      register: mongo_service
    - template:
        src: templates/mongodb.conf.j2
        dest: /etc/mongodb.conf
        owner: mongo
        group: mongo
        mode: '0640'
      register: mongo_defaults
    - systemd:
        daemon_reload: yes
      when: mongo_service.changed or mongo_defaults.changed or installation.changed
    # always restart the service, maybe this is unsafe...
    - systemd:
        enabled: yes
        state: restarted
        name: mongodb
      ignore_errors: yes # ignore service already enabled error 

- name: ensure thug user exists on thug hosts
  hosts: thug_hosts
  become: yes
  tasks:
    - command: /usr/bin/useradd --shell /sbin/nologin --comment "Runs run_thug.py only" --user-group thug
      ignore_errors: yes 

- name: ensure kafka group exists on kafka hosts
  hosts: kafka_hosts
  become: yes
  tasks: 
    - command: /usr/bin/useradd --user-group --shell /sbin/nologin --comment "Runs kafka/zookeeper only" kafka
      ignore_errors: yes

