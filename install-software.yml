
- name: run unit tests before pushing software
  hosts: localhost
  gather_facts: no
  tasks: 
    - local_action: command tox
  any_errors_fatal: true

- name: setup data directories for crawl data, geolocation and other data files
  hosts: thug_hosts x86_thug_hosts
  gather_facts: no
  tasks:
     - file:
         path: "/home/{{ ansible_user }}/data"
         state: directory
         mode: '0750'
     - file: 
         path: /data/kafkaspider
         state: directory
         owner: "{{ ansible_user }}"  # must be same user as will run the spider
         mode: '0750'
       become: yes

- name: key system requirements for thug software install (ARM)
  gather_facts: no
  hosts: thug_hosts
  become: yes
  tasks:
    - package: 
        name: ['rsync']
        state: present

- name: key system requirements for thug software install (X86)
  gather_facts: no
  hosts: x86_thug_hosts
  become: yes
  tasks:
    - apt: 
        name: ['rsync', 'libffi-dev', 'ssdeep', 'pkg-config', 'gcc', 'graphviz', 'graphviz-dev', 'libemu-dev']
        update_cache: yes
        state: present

- name: ensure software is on thug hosts
  hosts: thug_hosts x86_thug_hosts
  tasks:
     - file: # purge existing contents since we want a clean slate (ie. not cumulative)
         path: "/home/{{ ansible_user }}/src"
         state: absent
     - synchronize:
         src: src
         dest: "/home/{{ ansible_user }}"
         rsync_opts:
           - "--exclude=.git" 
           - "--exclude=.tox"
           - "-zz"

- name: ensure pip is installed to manage python and system is up-to-date
  hosts: kafka_hosts thug_hosts
  become: yes
  tasks:
     - pacman: name=python-pip state=present
     - pacman:
         state: present
         name:
           libffi
           ssdeep
           pkgconfig
           gcc
           gcc-fortran 
           graphviz
           cronie
           cblas
           #python-numpy 
         update_cache: yes
     - pacman: upgrade=yes 

- name: ensure libemu is installed for pygraphviz
  hosts: thug_hosts
  become: yes
  tasks:
     - unarchive:
         src: software/libemu_files.tar.gz
         dest: /
         owner: root
         group: root
 
- name: ensure python3 pre-reqs are installed
  hosts: thug_hosts 
  become: yes
  tasks:
     - pip:
         executable: pip3
         requirements: "/home/{{ ansible_user }}/src/requirements.txt"

- name: ensure python3 pre-reqs are install
  hosts: x86_thug_hosts
  become: yes
  tasks:
     - pip:
         requirements: "/home/{{ ansible_user }}/src/requirements.txt"

- name: setup thug low-privilege account to reduce risk
  hosts: thug_hosts x86_thug_hosts
  become: yes
  tasks:
     - group:
         name: lowpriv
         state: present
     - user: 
         create_home: yes
         name: lowpriv
         group: lowpriv
         password_lock: yes # account must be enabled to have a crontab and run processes
         state: present

- name: setup spider low-privilege account (kafkaspider and snippetspider)
  hosts: thug_hosts x86_thug_hosts
  become: yes
  tasks:
    - user:
         create_home: yes
         name: spider
         group: lowpriv
         password_lock: yes
         state: present 

- name: ensure thug pip3 pre-reqs are installed
  hosts: thug_hosts x86_thug_hosts
  become: yes
  tasks:
     - pip:
         executable: pip3
         name:
           - PySocks==1.7.1
           - beautifulsoup4==4.8.2
           - cchardet==2.1.5
           - cssutils==1.0.2
           - elasticsearch==7.5.1
           - html5lib==1.0.1
           - lxml==4.4.2
           - networkx==2.4
           - pefile==2019.4.18
           - pygraphviz==1.5
           - pylibemu==0.6.1
           - pymongo==3.10.1
           - python-magic==0.4.15
           - rarfile==3.1
           - requests==2.22.0
           - six==1.13.0
           - yara-python==3.11.0
           - zope.interface
           - cffi
           - scrapy

- name: install data files (geolite2 city db, AU seed URLs)
  hosts: thug_hosts x86_thug_hosts
  tasks:
    - unarchive:
        src: software/GeoLite2-City_20200114.tar.gz
        dest: "/home/{{ ansible_user }}/data"
    - copy:
        src: software/filted_au_websites.csv
        dest: "/home/{{ ansible_user }}/data/filtered_au_websites.csv"
        mode: '0644'

- name: thug file install
  hosts: thug_hosts
  become: yes
  tasks:
    - unarchive:
        src: software/thug-files.tar.gz
        dest: /   # will unpack into /usr/lib/python3.8/site-packages
        owner: root
        group: root
    - unarchive:
        src: software/ssdeep_files.tar.gz
        dest: /
        owner: root
        group: root

- name: ensure ld.so finds libemu
  hosts: thug_hosts
  become: yes
  tasks:
    - template:
        src: templates/local.ld.so.conf.j2
        dest: /etc/ld.so.conf.d/local.conf
        owner: root
        group: root
        mode: '0640'
      register: template_installed
    - command: /sbin/ldconfig
      when: template_installed.changed 

#  sudo ln -s /usr/lib/libboost_python38.so.1.72.0 /usr/lib/libboost_python38.so.1.71.0
- name: boost symlink is much easier than v8 deps rebuild....
  hosts: thug_hosts
  become: yes
  tasks:
    - file:
        state: link
        owner: root
        group: root
        force: yes
        src: /usr/lib/libboost_python38.so.1.72.0
        dest: /usr/lib/libboost_python38.so.1.71.0

- name: ensure /etc/thug files are installed
  hosts: thug_hosts
  become: yes
  tasks:
    - file:
        path: /etc/thug
        owner: root
        group: root
        mode: '0755'
        state: directory
    - unarchive:
        src: software/etc_thug_files.tar.gz
        dest: /etc/thug/
        owner: root
        group: root

- name: ensure daemonize binary is installed into /usr/local/bin so that we can run executables without ansible handholding
  hosts: thug_hosts
  become: yes
  tasks:
    - copy: src=software/daemonize dest=/usr/local/bin/daemonize owner=root group=root mode='0711'

- name: run cron jobs to ensure maintenance is done
  hosts: pi8
  become: yes # so we can install into a low-privilege user crontab
  tasks:
    - cron:
        name: "weekly blacklist sites"
        special_time: weekly
        user: lowpriv
        job: /usr/bin/python3.8 "/home/{{ ansible_user }}/src/populate_long_term_blacklist.py --start earliest --group populate-long-term-blacklist"
    - cron:
        user: lowpriv
        name: PASSWORD
        env: yes
        job: "{{ MONGO_RW_PASS }}"
    - cron:
        name: "retry failed downloads"
        special_time: weekly
        user: lowpriv  # to reduce security risk of fetching from bad sites
        job: /usr/bin/python3.8  "/home/{{ ansible_user }}/src/retry_broken_downloads.py --v --start earliest --dbuser rw"
    - cron:
        name: "publish hits"
        special_time: weekly
        user: lowpriv
        job: /usr/bin/python3.8 "/home/{{ ansible_user }}/src/etl_publish_hits.py --v --tail --bad --dbuser rw"
